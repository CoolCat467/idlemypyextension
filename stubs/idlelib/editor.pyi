from collections.abc import Callable
from idlelib import (
    configdialog as configdialog,
    grep as grep,
    help as help,  # noqa: A004
    help_about as help_about,
    macosx as macosx,
    mainmenu as mainmenu,
    pyparse as pyparse,
    query as query,
    replace as replace,
    search as search,
    window as window,
)
from idlelib.autocomplete import AutoComplete as AutoComplete
from idlelib.autoexpand import AutoExpand as AutoExpand
from idlelib.calltip import Calltip as Calltip
from idlelib.codecontext import CodeContext as CodeContext
from idlelib.colorizer import (
    ColorDelegator as ColorDelegator,
    color_config as color_config,
)
from idlelib.config import idleConf as idleConf
from idlelib.filelist import FileList
from idlelib.format import (
    FormatParagraph as FormatParagraph,
    FormatRegion as FormatRegion,
    Indents as Indents,
    Rstrip as Rstrip,
)
from idlelib.iomenu import IOBinding as IOBinding, encoding as encoding
from idlelib.multicall import MultiCallCreator as MultiCallCreator
from idlelib.parenmatch import ParenMatch as ParenMatch
from idlelib.percolator import Percolator as Percolator
from idlelib.sidebar import LineNumbers as LineNumbers
from idlelib.statusbar import MultiStatusBar as MultiStatusBar
from idlelib.tree import wheel_event as wheel_event
from idlelib.undo import UndoDelegator as UndoDelegator
from idlelib.util import py_extensions as py_extensions
from idlelib.zoomheight import ZoomHeight as ZoomHeight
from tkinter import Event, Frame, Menu, Misc, Scrollbar, Text, Variable
from typing import Any

from mypy_extensions import DefaultNamedArg, KwArg

TK_TABWIDTH_DEFAULT: int
darwin: bool

class EditorWindow:
    filesystemencoding: str
    help_url: str | None
    allow_code_context: bool
    allow_line_numbers: bool
    user_input_insert_tags: str | None
    flist: FileList
    root: Misc
    menubar: Menu
    top: window.ListedToplevel
    tkinter_vars: dict[str, Variable]
    recent_files_path: str
    prompt_last_line: str
    text_frame: Frame
    vbar: Scrollbar
    text: Text  # Multi-call object from Text object
    fregion: FormatRegion
    usetabs: bool
    tabwidth: int
    indentwidth: int
    num_context_lines: tuple[int, ...]
    per: Percolator
    undo: UndoDelegator
    io: IOBinding
    good_load: bool
    color: ColorDelegator | None
    code_context: CodeContext | None
    line_numbers: LineNumbers | None
    wmenu_end: int
    askinteger: Callable[
        [
            str | None,
            str,
            DefaultNamedArg(int | None, "initialvalue"),
            DefaultNamedArg(int | None, "minvalue"),
            DefaultNamedArg(int | None, "maxvalue"),
            DefaultNamedArg(Misc | None, "parent"),
        ],
        int | None,
    ]
    askyesno: Callable[[str | None, str | None, KwArg(Any)], bool]
    showerror: Callable[[str | None, str | None, KwArg(Any)], bool]
    ctip: Calltip
    def __init__(
        self,
        flist: FileList | None = ...,
        filename: str | None = ...,
        key: str | None = ...,
        root: Misc | None = ...,
    ) -> None: ...
    def handle_winconfig(self, event: Event[Any] | None = ...) -> None: ...
    width: int
    def set_width(self) -> None: ...
    def new_callback(self, event: Event[Any]) -> str: ...
    def home_callback(self, event: Event[Any]) -> str: ...
    status_bar: MultiStatusBar
    def set_status_bar(self) -> None: ...
    def set_line_and_column(self, event: Event[Any] | None = ...) -> None: ...
    menu_specs: list[tuple[str, str]]
    menudict: dict[str, Menu]
    recent_files_menu: Menu
    base_helpmenu_length: int
    def createmenubar(self) -> None: ...
    def postwindowsmenu(self) -> None: ...
    def update_menu_label(self, menu: str, index: str, label: str) -> None: ...
    def update_menu_state(self, menu: str, index: str, state: str) -> None: ...
    def handle_yview(self, event: str, *args: Any) -> str: ...
    rmenu: Menu | None
    event: Event[Any]
    def right_menu_event(self, event: Event[Any]) -> str: ...
    rmenu_specs: list[tuple[str | None, str | None, str | None]]
    def make_rmenu(self) -> None: ...
    def rmenu_check_cut(self) -> str: ...
    def rmenu_check_copy(self) -> str: ...
    def rmenu_check_paste(self) -> str: ...
    def about_dialog(self, event: Event[Any] | None = ...) -> str: ...
    def config_dialog(self, event: Event[Any] | None = ...) -> str: ...
    def help_dialog(self, event: Event[Any] | None = ...) -> str: ...
    def python_docs(self, event: Event[Any] | None = ...) -> str: ...
    def cut(self, event: Event[Any]) -> str: ...
    def copy(self, event: Event[Any]) -> str | None: ...
    def paste(self, event: Event[Any]) -> str: ...
    def select_all(self, event: Event[Any] | None = ...) -> str: ...
    def remove_selection(self, event: Event[Any] | None = ...) -> str: ...
    def move_at_edge_if_selection(
        self,
        edge_index: int,
    ) -> Callable[[Event[Any]], None]: ...
    def del_word_left(self, event: Event[Any]) -> str: ...
    def del_word_right(self, event: Event[Any]) -> str: ...
    def find_event(self, event: Event[Any]) -> str: ...
    def find_again_event(self, event: Event[Any]) -> str: ...
    def find_selection_event(self, event: Event[Any]) -> str: ...
    def find_in_files_event(self, event: Event[Any]) -> str: ...
    def replace_event(self, event: Event[Any]) -> str: ...
    def goto_line_event(self, event: Event[Any]) -> str: ...
    def open_module(self) -> str | None: ...
    def open_module_event(self, event: Event[Any]) -> str: ...
    def open_module_browser(self, event: Event[Any] | None = ...) -> str: ...
    def open_path_browser(self, event: Event[Any] | None = ...) -> str: ...
    def open_turtle_demo(self, event: Event[Any] | None = ...) -> str: ...
    def gotoline(self, lineno: int) -> None: ...
    def ispythonsource(self, filename: str) -> bool: ...
    def close_hook(self) -> None: ...
    def set_close_hook(self, close_hook: Callable[[], Any]) -> None: ...
    def filename_change_hook(self) -> None: ...
    def ResetColorizer(self) -> None: ...
    IDENTCHARS: str
    def colorize_syntax_error(self, text: str, pos: str) -> None: ...
    def update_cursor_blink(self) -> None: ...
    def ResetFont(self) -> None: ...
    def RemoveKeybindings(self) -> None: ...
    def ApplyKeybindings(self) -> None: ...
    def set_notabs_indentwidth(self) -> None: ...
    def reset_help_menu_entries(self) -> None: ...
    def update_recent_files_list(self, new_file: str | None = ...) -> None: ...
    def saved_change_hook(self) -> None: ...
    def get_saved(self) -> bool: ...
    def set_saved(self, flag: bool) -> None: ...
    def reset_undo(self) -> None: ...
    def short_title(self) -> str: ...
    def long_title(self) -> str: ...
    def center_insert_event(self, event: Event[Any]) -> str: ...
    def center(self, mark: str = ...) -> None: ...
    def getwindowlines(self) -> tuple[int, int]: ...
    def getlineno(self, mark: str = ...) -> int: ...
    def get_geometry(
        self,
    ) -> tuple[
        int,
        int,
        int,
        int,
    ]: ...  # It's really a list object but more clear
    def close_event(self, event: Event[Any]) -> str: ...
    def maybesave(self) -> str | None: ...
    def close(self) -> str | None: ...
    extensions: dict[str, object]
    def load_extensions(self) -> None: ...
    def unload_extensions(self) -> None: ...
    def load_standard_extensions(self) -> None: ...
    def get_standard_extension_names(self) -> list[str]: ...
    extfiles: dict[str, str]
    def load_extension(self, name: str) -> None: ...
    def apply_bindings(
        self,
        keydefs: dict[str, list[str]] | None = ...,
    ) -> None: ...
    def fill_menus(
        self,
        menudefs: list[tuple[str, list[tuple[str, str] | None]]] | None = ...,
        keydefs: dict[str, list[str]] | None = ...,
    ) -> None: ...
    def getvar(self, name: str) -> str | int | float | bool: ...
    def setvar(
        self,
        name: str,
        value: str | int | float | bool,
        vartype: Variable | None = ...,
    ) -> None: ...
    def get_var_obj(
        self,
        name: str,
        vartype: Variable | None = ...,
    ) -> str | int | float | bool: ...
    def is_char_in_string(self, text_index: str) -> bool: ...
    def get_selection_indices(self) -> tuple[str, str] | tuple[None, None]: ...
    def get_tk_tabwidth(self) -> int: ...
    def set_tk_tabwidth(self, newtabwidth: int) -> None: ...
    def set_indentation_params(
        self,
        is_py_src: bool,
        guess: bool = ...,
    ) -> None: ...
    def smart_backspace_event(self, event: Event[Any]) -> str: ...
    def smart_indent_event(self, event: Event[Any]) -> str: ...
    def newline_and_indent_event(self, event: Event[Any]) -> str: ...
    def reindent_to(self, column: int) -> None: ...
    def guess_indent(self) -> int: ...
    def toggle_line_numbers_event(
        self,
        event: Event[Any] | None = ...,
    ) -> None: ...

    Percolator = Percolator
    ColorDelegator = ColorDelegator
    color_config = color_config
    UndoDelegator = UndoDelegator
    IOBinding = IOBinding
    encoding: str
    mainmenu = mainmenu
    MultiStatusBar = MultiStatusBar
    AutoComplete = AutoComplete
    AutoExpand = AutoExpand
    Calltip = Calltip
    CodeContext = CodeContext
    LineNumbers = LineNumbers
    FormatParagraph = FormatParagraph
    FormatRegion = FormatRegion
    Indents = Indents
    Rstrip = Rstrip
    ParenMatch = ParenMatch
    ZoomHeight = ZoomHeight

def index2line(index: str) -> int: ...
def get_line_indent(line: str, tabwidth: int) -> tuple[int, int]: ...

class IndentSearcher:
    text: Text
    tabwidth: int
    i: int
    finished: int
    blkopenline: bool | None
    indentedline: bool | None
    def __init__(self, text: Text, tabwidth: int) -> None: ...
    def readline(self) -> str: ...
    def tokeneater(
        self,
        type: int,
        token: str,
        start: int,
        end: int,
        line: str,
        INDENT: int = ...,
        NAME: int = ...,
        OPENERS: tuple[str, ...] = ...,
    ) -> None: ...
    def run(self) -> bool | None: ...

def prepstr(s: str) -> tuple[int, str]: ...

keynames: dict[str, str]

def get_accelerator(keydefs: dict[str, str], eventname: str) -> str: ...
def fixwordbreaks(root: Misc) -> None: ...
